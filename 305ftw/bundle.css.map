{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte"
  ],
  "sourcesContent": [
    "\n<script>\n\texport let name;\n\texport let tracks;\n\texport let events;\nlet ips = [\n'192.168.1.6', '192.168.1.8', '192.168.1.7', // testing\n  '172.20.10.2',\n  '172.20.10.3',\n  '172.20.10.4',\n  '172.20.10.5',\n  '172.20.10.6',\n  '172.20.10.7',\n  '172.20.10.8',\n  '172.20.10.9',\n  '172.20.10.10',\n  '172.20.10.11',\n  '172.20.10.12',\n  '172.20.10.13',\n  '172.20.10.14',\n];\nlet backend;\nlet id;\nlet fromdays = 7;\nlet todays = 0;\nlet selectedevent;\nlet selectedtrack;\nlet checking_ll;\nlet trackpromise;\nlet gpspromise;\nlet confirmpromise;\nlet error = false;\nlet liveloxuid;\nlet ll_myself;\nlet confirmed = false;\n\nimport { onMount } from 'svelte';\n\nfunction getBackend() {\n  error = false;\n  for (let ip of ips) {\n    let test = 'http://' + ip + ':5000';\n    fetch(test)\n      .then(response => response.json())\n      .then(data => {\n        data['status'] === 'ok' ? backend = test : false;\n      })\n      .catch(err => {\n        console.log(err);\n        backend ? false : error = 'Could not connect to tethered backend';\n      });\n  }\n}\n\nfunction getTracks() {\n  error = false;\n  tracks = [];\n  events = [];\n  gpspromise = fetch(backend + '/tracks', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({fromdays: fromdays, todays: todays}),\n  })\n  .then(response => response.json())\n  .then(data => {\n    tracks = data['tracks'];\n    id = data['id'];\n    })\n  .catch(err => {\n    console.log(err);\n    error = 'Could not fetch GPS data from watch';\n  });\n}\n\nfunction checktrack(trackid) {\n  error = false;\n  events = [];\n  checking_ll = true;\n  selectedtrack = trackid;\n  trackpromise = fetch(backend + '/loxcheck', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({id: id, track: trackid}),\n  })\n    .then(response => response.json())\n    .then(data => {\n      events = data['events'];\n      liveloxuid = data['lluid'];\n      ll_myself = data['myself'];\n    })\n  //trackpromise = new Promise(res => setTimeout(res, 2000))\n  //.then(d => { console.log('tracks fetched')})\n  .catch(err => {\n    console.log(err);\n    error = 'Error contacting livelox.com';\n    selectedtrack = false;\n    });\n};\n\nfunction confirmTrackEvent(eventclassid) {\n  error = false;\n  confirmed = false;\n  confirmpromise = fetch(backend + '/loxdone', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({\n      id: id,\n      classid: eventclassid,\n      lluid: liveloxuid,\n      myself: ll_myself,\n      }),\n  })\n  .then(d => {confirmed = true;})\n  .catch(err => {\n    console.log(err);\n    error = 'Error confirming livelox event upload';\n    confirmed = false;\n    });\n}\n\n\nonMount(() => {\n  getBackend();\n});\n\n</script>\n\n<style>\n\th1 {\n\t\tcolor: purple;\n\t}\ntable {\n  border-collapse: collapse;\n}\ntr {\n  border-bottom: 1px solid lightgrey;\n}\nth {\n  text-align: left;\n  padding-right:20px;\n}\ntd {\n  padding-right:20px;\n}\ntr.active {\n  background-color:lightgreen;\n}\nbutton:disabled{\n color:lightgrey;\n background-color: #f4f4f4;\n}\n\narticle {\n  background-color: pink;\n  width: 20%;\n  padding: 1em;\n}\n\n</style>\n\n<h1>305FTW: automates garmin-USB to livelox.com</h1>\n{#if backend }\n  <button on:click={getTracks}>Get tracks from watch</button>\n  <input type=\"number\" min=0 bind:value={fromdays} size=\"1\">days ago until\n  <input type=\"number\" min=0 bind:value={todays} size=\"1\">days ago \n{:else}\n<button on:click={getBackend}>Find backend</button>\n{/if}\n<div>\n{#await gpspromise}\n<i class=\"fas fa-spinner fa-spin\"></i>Fetching GPS data from watch\n{/await}\n</div>\n\n{#if error}\n<article>\nAn error occurred:\n{error}\n</article>\n{/if}\n\n<h3>Tracks</h3>\n<table>\n<thead>\n<tr>\n<th>Start</th>\n<th>Duration</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n{#each tracks as track}\n\n<tr class:active=\"{selectedtrack === track.id}\">\n\n<td>{track.starttime}</td>\n<td>{track.dur_min}:{String(track.dur_sec).padStart(2, '0')}</td>\n<td>\n  {#await trackpromise}\n  <button disabled>Check livelox</button>\n  {#if selectedtrack === track.id}\n  <i class=\"fas fa-spinner fa-pulse\"></i>\n  {/if}\n  {:then }\n  <button on:click={function() {checktrack(track.id)}}>Check livelox</button>\n  {/await}\n</td>\n</tr>\n{/each}\n</tbody>\n</table>\n\n\n<h3>Events</h3>\n<table>\n<tbody>\n{#each events as event}\n<tr class:active=\"{selectedevent === event.id}\">\n<td> {event.eventname}, {event.name}</td>\n<td>\n  {#await confirmpromise}\n  <button disabled>Upload to this event</button>\n  {#if selectedevent === event.id}\n  <i class=\"fas fa-spinner fa-pulse\"></i>\n  {/if}\n  {:then }\n  <button on:click={function() {confirmTrackEvent(event.id)}}>Upload to this event</button>\n  {/await}\n</td>\n</tr>\n{/each}\n</tbody>\n</table>\n"
  ],
  "names": [],
  "mappings": "AAgIC,EAAE,eAAC,CAAC,AACH,KAAK,CAAE,MAAM,AACd,CAAC,AACF,KAAK,eAAC,CAAC,AACL,eAAe,CAAE,QAAQ,AAC3B,CAAC,AACD,EAAE,eAAC,CAAC,AACF,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,SAAS,AACpC,CAAC,AACD,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,IAAI,CAChB,cAAc,IAAI,AACpB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,cAAc,IAAI,AACpB,CAAC,AACD,EAAE,OAAO,eAAC,CAAC,AACT,iBAAiB,UAAU,AAC7B,CAAC,AACD,qBAAM,SAAS,CAAC,AACf,MAAM,SAAS,CACf,gBAAgB,CAAE,OAAO,AAC1B,CAAC,AAED,OAAO,eAAC,CAAC,AACP,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,GAAG,AACd,CAAC"
}